<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Snake Bite - Ad Supported Game</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-XXXXXXXXXXXXXXXX" crossorigin="anonymous"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            color: white;
            padding: 20px;
        }
        
        .game-container {
            width: 100%;
            max-width: 1000px;
            background: rgba(10, 20, 30, 0.85);
            border-radius: 20px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
            display: flex;
            flex-direction: column;
            position: relative;
            margin-top: 20px;
        }
        
        .header {
            background: rgba(0, 0, 0, 0.6);
            padding: 15px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 2px solid #00ffcc;
        }
        
        .logo {
            font-size: 28px;
            font-weight: 700;
            color: #00ffcc;
            text-shadow: 0 0 10px rgba(0, 255, 204, 0.7);
        }
        
        .score-display {
            font-size: 22px;
            font-weight: 600;
            color: #ffcc00;
        }
        
        .content {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 20px;
            position: relative;
            overflow: hidden;
        }
        
        .main-menu {
            text-align: center;
            width: 100%;
        }
        
        .game-title {
            font-size: 48px;
            margin-bottom: 30px;
            color: #ffcc00;
            text-shadow: 0 0 15px rgba(255, 204, 0, 0.8);
            letter-spacing: 2px;
        }
        
        .menu-buttons {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 15px;
            width: 100%;
            max-width: 300px;
            margin: 0 auto;
        }
        
        .menu-btn {
            width: 100%;
            padding: 15px;
            font-size: 18px;
            font-weight: 600;
            background: linear-gradient(to right, #00aaff, #0077ff);
            border: none;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        }
        
        .menu-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 7px 20px rgba(0, 0, 0, 0.4);
            background: linear-gradient(to right, #00ccff, #0088ff);
        }
        
        .menu-btn:active {
            transform: translateY(1px);
        }
        
        .play-mode {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        
        .mode-btn {
            flex: 1;
            padding: 12px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid #00ffcc;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .mode-btn.active {
            background: rgba(0, 255, 204, 0.2);
            box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
        }
        
        .character-selection {
            width: 100%;
            text-align: center;
            display: none;
        }
        
        .selection-title {
            font-size: 32px;
            margin-bottom: 25px;
            color: #ffcc00;
        }
        
        .characters {
            display: flex;
            justify-content: center;
            gap: 20px;
            flex-wrap: wrap;
            margin-bottom: 30px;
        }
        
        .character {
            width: 120px;
            height: 150px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .character:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.15);
            border-color: #00ffcc;
        }
        
        .character.selected {
            background: rgba(0, 255, 204, 0.2);
            border-color: #00ffcc;
            box-shadow: 0 0 15px rgba(0, 255, 204, 0.5);
        }
        
        .character-icon {
            font-size: 50px;
            margin-bottom: 10px;
        }
        
        .character-name {
            font-size: 16px;
            font-weight: 600;
        }
        
        .map-selection {
            width: 100%;
            text-align: center;
            display: none;
        }
        
        .maps {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .map {
            width: 160px;
            height: 120px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
            background-size: cover;
            background-position: center;
        }
        
        .map:hover {
            transform: translateY(-5px);
            background: rgba(255, 255, 255, 0.15);
            border-color: #ffcc00;
        }
        
        .map.selected {
            background: rgba(255, 204, 0, 0.2);
            border-color: #ffcc00;
            box-shadow: 0 0 15px rgba(255, 204, 0, 0.5);
        }
        
        .map-name {
            font-size: 18px;
            font-weight: 600;
            background: rgba(0, 0, 0, 0.6);
            padding: 5px 15px;
            border-radius: 20px;
        }
        
        .settings {
            width: 100%;
            text-align: center;
            display: none;
        }
        
        .settings-options {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 15px;
            padding: 25px;
            max-width: 400px;
            margin: 0 auto;
        }
        
        .option {
            margin-bottom: 20px;
        }
        
        .option label {
            display: block;
            margin-bottom: 8px;
            font-size: 18px;
            color: #00ffcc;
        }
        
        .slider {
            width: 100%;
            height: 10px;
            -webkit-appearance: none;
            background: rgba(255, 255, 255, 0.1);
            outline: none;
            border-radius: 5px;
        }
        
        .slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 25px;
            height: 25px;
            border-radius: 50%;
            background: #00ffcc;
            cursor: pointer;
        }
        
        .game-area {
            display: none;
            width: 100%;
            height: 100%;
            position: relative;
        }
        
        canvas {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            display: block;
            margin: 0 auto;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
        }
        
        .control-btn {
            padding: 12px 25px;
            background: rgba(255, 255, 255, 0.1);
            border: 2px solid #ffcc00;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .control-btn:hover {
            background: rgba(255, 204, 0, 0.2);
        }
        
        .back-btn {
            position: absolute;
            top: 20px;
            left: 20px;
            padding: 10px 20px;
            background: rgba(255, 0, 0, 0.3);
            border: 2px solid #ff5555;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }
        
        .back-btn:hover {
            background: rgba(255, 0, 0, 0.4);
        }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.8);
            display: none;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }
        
        .game-over h2 {
            font-size: 48px;
            color: #ff5555;
            margin-bottom: 20px;
            text-shadow: 0 0 10px rgba(255, 85, 85, 0.7);
        }
        
        .final-score {
            font-size: 28px;
            margin-bottom: 30px;
            color: #ffcc00;
        }
        
        .game-over-buttons {
            display: flex;
            flex-direction: column;
            gap: 15px;
            width: 100%;
            max-width: 250px;
        }
        
        /* Ad Containers */
        .ad-container {
            background: rgba(0, 0, 0, 0.3);
            border-radius: 10px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: #aaa;
            font-size: 14px;
            margin: 15px 0;
            overflow: hidden;
        }
        
        .ad-label {
            position: absolute;
            top: 5px;
            right: 5px;
            background: rgba(0,0,0,0.5);
            color: #ccc;
            padding: 2px 5px;
            border-radius: 3px;
            font-size: 10px;
            z-index: 2;
        }
        
        .top-ad {
            width: 100%;
            max-width: 1000px;
            height: 90px;
            position: relative;
        }
        
        .menu-ad {
            width: 100%;
            max-width: 300px;
            height: 250px;
            margin: 20px auto;
            position: relative;
        }
        
        .game-ad {
            width: 100%;
            max-width: 728px;
            height: 90px;
            margin: 20px auto;
            position: relative;
        }
        
        /* Ad placeholders */
        .ad-placeholder {
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background: linear-gradient(45deg, #1a1a2e, #16213e);
            color: #4db8ff;
            text-align: center;
            padding: 10px;
            flex-direction: column;
        }
        
        .ad-placeholder i {
            font-size: 24px;
            margin-bottom: 10px;
        }
        
        @media (max-width: 768px) {
            .game-container {
                height: auto;
            }
            
            .game-title {
                font-size: 36px;
            }
            
            .characters {
                gap: 10px;
            }
            
            .character {
                width: 100px;
                height: 130px;
            }
            
            .character-icon {
                font-size: 40px;
            }
            
            .maps {
                gap: 10px;
            }
            
            .map {
                width: 140px;
                height: 100px;
            }
            
            .game-over h2 {
                font-size: 36px;
            }
            
            .top-ad, .game-ad {
                height: 50px;
            }
            
            .menu-ad {
                height: 200px;
            }
        }
        
        @media (max-width: 480px) {
            .header {
                flex-direction: column;
                gap: 10px;
            }
            
            .character {
                width: 85px;
                height: 110px;
            }
            
            .character-icon {
                font-size: 30px;
            }
            
            .map {
                width: 130px;
            }
            
            .play-mode {
                flex-direction: column;
            }
            
            .logo {
                font-size: 22px;
            }
            
            .score-display {
                font-size: 18px;
            }
            
            .top-ad, .game-ad {
                height: 50px;
            }
            
            .menu-ad {
                height: 150px;
            }
        }
    </style>
</head>
<body>
    <!-- Top Banner Ad Container -->
    <div class="top-ad ad-container">
        <div class="ad-label">ADVERTISEMENT</div>
        <div class="ad-placeholder">
            <i class="fas fa-ad"></i>
            <div>Banner Ad Space (728x90)</div>
            <small>Replace with your AdSense code</small>
        </div>
        <!-- 
            AdSense Code Example:
            <ins class="adsbygoogle"
                 style="display:inline-block;width:728px;height:90px"
                 data-ad-client="ca-pub-XXXXXXXXXXXXXXXX"
                 data-ad-slot="XXXXXXXXXX"></ins>
            <script>
                 (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        -->
    </div>

    <div class="game-container">
        <div class="header">
            <div class="logo">SNAKE BITE</div>
            <div class="score-display">Score: <span id="score">0</span></div>
        </div>
        
        <div class="content">
            <!-- Main Menu -->
            <div class="main-menu" id="mainMenu">
                <h1 class="game-title">SNAKE BITE</h1>
                <div class="menu-buttons">
                    <button class="menu-btn" id="startBtn">START GAME</button>
                    <button class="menu-btn" id="characterBtn">CHOOSE CHARACTER</button>
                    <button class="menu-btn" id="mapBtn">CHOOSE MAP</button>
                    <button class="menu-btn" id="settingsBtn">SETTINGS</button>
                </div>
                
                <div class="play-mode">
                    <div class="mode-btn active" id="offlineMode">OFFLINE</div>
                    <div class="mode-btn" id="onlineMode">ONLINE</div>
                </div>
                
                <!-- Menu Rectangle Ad Container -->
                <div class="menu-ad ad-container">
                    <div class="ad-label">ADVERTISEMENT</div>
                    <div class="ad-placeholder">
                        <i class="fas fa-ad"></i>
                        <div>Rectangle Ad (300x250)</div>
                        <small>Replace with your AdSense code</small>
                    </div>
                    <!-- 
                        AdSense Code Example:
                        <ins class="adsbygoogle"
                             style="display:inline-block;width:300px;height:250px"
                             data-ad-client="ca-pub-XXXXXXXXXXXXXXXX"
                             data-ad-slot="XXXXXXXXXX"></ins>
                        <script>
                             (adsbygoogle = window.adsbygoogle || []).push({});
                        </script>
                    -->
                </div>
            </div>
            
            <!-- Character Selection -->
            <div class="character-selection" id="characterSelection">
                <h2 class="selection-title">Select Your Character</h2>
                <div class="characters">
                    <div class="character selected" data-character="snake">
                        <div class="character-icon">🐍</div>
                        <div class="character-name">Green Snake</div>
                    </div>
                    <div class="character" data-character="dragon">
                        <div class="character-icon">🐉</div>
                        <div class="character-name">Fire Dragon</div>
                    </div>
                    <div class="character" data-character="viper">
                        <div class="character-icon">🪱</div>
                        <div class="character-name">Desert Viper</div>
                    </div>
                    <div class="character" data-character="cobra">
                        <div class="character-icon">🐲</div>
                        <div class="character-name">King Cobra</div>
                    </div>
                </div>
                <button class="menu-btn" id="confirmCharacter">CONFIRM SELECTION</button>
            </div>
            
            <!-- Map Selection -->
            <div class="map-selection" id="mapSelection">
                <h2 class="selection-title">Select Game Map</h2>
                <div class="maps">
                    <div class="map selected" data-map="jungle" style="background-image: url('https://images.unsplash.com/photo-1542273917363-3b1817f69a2d?q=80&w=2070&auto=format&fit=crop');">
                        <div class="map-name">Jungle</div>
                    </div>
                    <div class="map" data-map="desert" style="background-image: url('https://images.unsplash.com/photo-1509316785289-025f5b846b35?q=80&w=2076&auto=format&fit=crop');">
                        <div class="map-name">Desert</div>
                    </div>
                    <div class="map" data-map="ice" style="background-image: url('https://images.unsplash.com/photo-1519408299519-b7a0274f7d67?q=80&w=2070&auto=format&fit=crop');">
                        <div class="map-name">Ice World</div>
                    </div>
                    <div class="map" data-map="cave" style="background-image: url('https://images.unsplash.com/photo-1559825481-12a05cc00344?q=80&w=1965&auto=format&fit=crop');">
                        <div class="map-name">Dark Cave</div>
                    </div>
                </div>
                <button class="menu-btn" id="confirmMap">CONFIRM SELECTION</button>
            </div>
            
            <!-- Settings -->
            <div class="settings" id="settings">
                <h2 class="selection-title">Game Settings</h2>
                <div class="settings-options">
                    <div class="option">
                        <label for="volume">Music Volume</label>
                        <input type="range" min="0" max="100" value="70" class="slider" id="volume">
                    </div>
                    <div class="option">
                        <label for="effects">Sound Effects</label>
                        <input type="range" min="0" max="100" value="90" class="slider" id="effects">
                    </div>
                    <div class="option">
                        <label for="difficulty">Game Difficulty</label>
                        <input type="range" min="1" max="3" value="2" class="slider" id="difficulty">
                    </div>
                </div>
                <button class="menu-btn" id="saveSettings">SAVE SETTINGS</button>
            </div>
            
            <!-- Back Button -->
            <button class="back-btn" id="backBtn">BACK</button>
        </div>
        
        <!-- Game Area -->
        <div class="game-area" id="gameArea">
            <canvas id="gameCanvas" width="600" height="500"></canvas>
            
            <!-- In-game Ad Container -->
            <div class="game-ad ad-container">
                <div class="ad-label">ADVERTISEMENT</div>
                <div class="ad-placeholder">
                    <i class="fas fa-ad"></i>
                    <div>Leaderboard Ad (728x90)</div>
                    <small>Replace with your AdSense code</small>
                </div>
                <!-- 
                    AdSense Code Example:
                    <ins class="adsbygoogle"
                         style="display:inline-block;width:728px;height:90px"
                         data-ad-client="ca-pub-4266519520086979"
                         data-ad-slot="XXXXXXXXXX"></ins>
                    <script>
                         (adsbygoogle = window.adsbygoogle || []).push({});
                    </script>
                -->
            </div>
            
            <div class="controls">
                <button class="control-btn" id="restartBtn">RESTART</button>
                <button class="control-btn" id="menuBtn">MENU</button>
            </div>
        </div>
        
        <!-- Game Over Screen -->
        <div class="game-over" id="gameOver">
            <h2>GAME OVER!</h2>
            <div class="final-score">Your Score: <span id="finalScore">0</span></div>
            <div class="game-over-buttons">
                <button class="menu-btn" id="playAgainBtn">PLAY AGAIN</button>
                <button class="menu-btn" id="homeBtn">HOME</button>
            </div>
        </div>
    </div>

    <script>
        // Game state
        const gameState = {
            score: 0,
            snake: [],
            food: {},
            direction: 'right',
            nextDirection: 'right',
            gameOver: false,
            gameStarted: false,
            selectedCharacter: 'snake',
            selectedMap: 'jungle',
            gameSpeed: 120,
            cellSize: 20
        };
        
        // DOM Elements
        const mainMenu = document.getElementById('mainMenu');
        const characterSelection = document.getElementById('characterSelection');
        const mapSelection = document.getElementById('mapSelection');
        const settings = document.getElementById('settings');
        const gameArea = document.getElementById('gameArea');
        const gameOverScreen = document.getElementById('gameOver');
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const finalScoreElement = document.getElementById('finalScore');
        const backBtn = document.getElementById('backBtn');
        const homeBtn = document.getElementById('homeBtn');
        
        // Initialize game
        function initGame() {
            // Reset game state
            gameState.score = 0;
            gameState.direction = 'right';
            gameState.nextDirection = 'right';
            gameState.gameOver = false;
            scoreElement.textContent = '0';
            
            // Create initial snake
            gameState.snake = [
                {x: 7, y: 10},
                {x: 6, y: 10},
                {x: 5, y: 10}
            ];
            
            // Generate first food
            generateFood();
            
            // Start game loop
            if (gameState.gameLoop) {
                clearInterval(gameState.gameLoop);
            }
            gameState.gameLoop = setInterval(gameLoop, gameState.gameSpeed);
        }
        
        // Generate food at random position
        function generateFood() {
            const maxX = Math.floor(canvas.width / gameState.cellSize) - 1;
            const maxY = Math.floor(canvas.height / gameState.cellSize) - 1;
            
            // Generate random position
            let newFood;
            let overlapping;
            
            do {
                overlapping = false;
                newFood = {
                    x: Math.floor(Math.random() * maxX),
                    y: Math.floor(Math.random() * maxY),
                    type: Math.random() > 0.7 ? 'chicken' : 'fruit'
                };
                
                // Check if food overlaps with snake
                for (const segment of gameState.snake) {
                    if (segment.x === newFood.x && segment.y === newFood.y) {
                        overlapping = true;
                        break;
                    }
                }
            } while (overlapping);
            
            gameState.food = newFood;
        }
        
        // Main game loop
        function gameLoop() {
            if (gameState.gameOver) {
                clearInterval(gameState.gameLoop);
                gameOverScreen.style.display = 'flex';
                finalScoreElement.textContent = gameState.score;
                return;
            }
            
            // Update direction
            gameState.direction = gameState.nextDirection;
            
            // Move snake
            const head = {...gameState.snake[0]};
            
            switch (gameState.direction) {
                case 'right': head.x++; break;
                case 'left': head.x--; break;
                case 'up': head.y--; break;
                case 'down': head.y++; break;
            }
            
            // Check collision with walls
            if (
                head.x < 0 || 
                head.y < 0 || 
                head.x >= canvas.width / gameState.cellSize || 
                head.y >= canvas.height / gameState.cellSize
            ) {
                gameState.gameOver = true;
                return;
            }
            
            // Check collision with self
            for (let i = 0; i < gameState.snake.length; i++) {
                if (head.x === gameState.snake[i].x && head.y === gameState.snake[i].y) {
                    gameState.gameOver = true;
                    return;
                }
            }
            
            // Add new head
            gameState.snake.unshift(head);
            
            // Check if food is eaten
            if (head.x === gameState.food.x && head.y === gameState.food.y) {
                // Increase score
                gameState.score += gameState.food.type === 'chicken' ? 5 : 1;
                scoreElement.textContent = gameState.score;
                
                // Generate new food
                generateFood();
            } else {
                // Remove tail if no food eaten
                gameState.snake.pop();
            }
            
            // Draw everything
            drawGame();
        }
        
        // Draw game elements
        function drawGame() {
            // Clear canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw background based on map
            drawMapBackground();
            
            // Draw snake
            for (let i = 0; i < gameState.snake.length; i++) {
                const segment = gameState.snake[i];
                
                // Head is different color
                if (i === 0) {
                    ctx.fillStyle = '#00cc00';
                } else {
                    // Body color based on character
                    switch(gameState.selectedCharacter) {
                        case 'dragon': ctx.fillStyle = '#ff5500'; break;
                        case 'viper': ctx.fillStyle = '#cc9900'; break;
                        case 'cobra': ctx.fillStyle = '#cc00cc'; break;
                        default: ctx.fillStyle = '#00cc00';
                    }
                }
                
                ctx.fillRect(
                    segment.x * gameState.cellSize, 
                    segment.y * gameState.cellSize, 
                    gameState.cellSize, 
                    gameState.cellSize
                );
                
                // Draw border
                ctx.strokeStyle = '#003300';
                ctx.lineWidth = 1;
                ctx.strokeRect(
                    segment.x * gameState.cellSize, 
                    segment.y * gameState.cellSize, 
                    gameState.cellSize, 
                    gameState.cellSize
                );
            }
            
            // Draw food
            ctx.fillStyle = gameState.food.type === 'chicken' ? '#ff9900' : '#ff0000';
            ctx.beginPath();
            ctx.arc(
                (gameState.food.x * gameState.cellSize) + (gameState.cellSize / 2),
                (gameState.food.y * gameState.cellSize) + (gameState.cellSize / 2),
                gameState.cellSize / 2,
                0,
                Math.PI * 2
            );
            ctx.fill();
        }
        
        // Draw map background
        function drawMapBackground() {
            // Draw background color as fallback
            switch(gameState.selectedMap) {
                case 'jungle':
                    ctx.fillStyle = '#006633';
                    break;
                case 'desert':
                    ctx.fillStyle = '#e6b800';
                    break;
                case 'ice':
                    ctx.fillStyle = '#66ccff';
                    break;
                case 'cave':
                    ctx.fillStyle = '#333333';
                    break;
                default:
                    ctx.fillStyle = '#006633';
            }
            
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Draw grid pattern
            ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';
            ctx.lineWidth = 0.5;
            
            for (let x = 0; x < canvas.width; x += gameState.cellSize) {
                ctx.beginPath();
                ctx.moveTo(x, 0);
                ctx.lineTo(x, canvas.height);
                ctx.stroke();
            }
            
            for (let y = 0; y < canvas.height; y += gameState.cellSize) {
                ctx.beginPath();
                ctx.moveTo(0, y);
                ctx.lineTo(canvas.width, y);
                ctx.stroke();
            }
        }
        
        // Event Listeners
        document.getElementById('startBtn').addEventListener('click', () => {
            mainMenu.style.display = 'none';
            gameArea.style.display = 'block';
            backBtn.style.display = 'none';
            gameState.gameStarted = true;
            initGame();
        });
        
        document.getElementById('characterBtn').addEventListener('click', () => {
            mainMenu.style.display = 'none';
            characterSelection.style.display = 'block';
            backBtn.style.display = 'block';
        });
        
        document.getElementById('mapBtn').addEventListener('click', () => {
            mainMenu.style.display = 'none';
            mapSelection.style.display = 'block';
            backBtn.style.display = 'block';
        });
        
        document.getElementById('settingsBtn').addEventListener('click', () => {
            mainMenu.style.display = 'none';
            settings.style.display = 'block';
            backBtn.style.display = 'block';
        });
        
        document.getElementById('backBtn').addEventListener('click', () => {
            characterSelection.style.display = 'none';
            mapSelection.style.display = 'none';
            settings.style.display = 'none';
            gameArea.style.display = 'none';
            gameOverScreen.style.display = 'none';
            mainMenu.style.display = 'block';
            backBtn.style.display = 'none';
        });
        
        document.getElementById('confirmCharacter').addEventListener('click', () => {
            characterSelection.style.display = 'none';
            mainMenu.style.display = 'block';
            backBtn.style.display = 'none';
        });
        
        document.getElementById('confirmMap').addEventListener('click', () => {
            mapSelection.style.display = 'none';
            mainMenu.style.display = 'block';
            backBtn.style.display = 'none';
        });
        
        document.getElementById('saveSettings').addEventListener('click', () => {
            settings.style.display = 'none';
            mainMenu.style.display = 'block';
            backBtn.style.display = 'none';
        });
        
        document.getElementById('restartBtn').addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            initGame();
        });
        
        document.getElementById('menuBtn').addEventListener('click', () => {
            gameArea.style.display = 'none';
            mainMenu.style.display = 'block';
            clearInterval(gameState.gameLoop);
        });
        
        document.getElementById('playAgainBtn').addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            initGame();
        });
        
        // Home button event listener
        homeBtn.addEventListener('click', () => {
            gameOverScreen.style.display = 'none';
            gameArea.style.display = 'none';
            mainMenu.style.display = 'block';
            clearInterval(gameState.gameLoop);
        });
        
        // Character selection
        document.querySelectorAll('.character').forEach(char => {
            char.addEventListener('click', () => {
                document.querySelectorAll('.character').forEach(c => c.classList.remove('selected'));
                char.classList.add('selected');
                gameState.selectedCharacter = char.dataset.character;
            });
        });
        
        // Map selection
        document.querySelectorAll('.map').forEach(map => {
            map.addEventListener('click', () => {
                document.querySelectorAll('.map').forEach(m => m.classList.remove('selected'));
                map.classList.add('selected');
                gameState.selectedMap = map.dataset.map;
            });
        });
        
        // Play mode selection
        document.getElementById('offlineMode').addEventListener('click', () => {
            document.getElementById('onlineMode').classList.remove('active');
            document.getElementById('offlineMode').classList.add('active');
        });
        
        document.getElementById('onlineMode').addEventListener('click', () => {
            document.getElementById('offlineMode').classList.remove('active');
            document.getElementById('onlineMode').classList.add('active');
            alert('Online mode will be available in the next version!');
        });
        
        // Keyboard controls
        document.addEventListener('keydown', e => {
            if (!gameState.gameStarted) return;
            
            switch(e.key) {
                case 'ArrowUp':
                    if (gameState.direction !== 'down') gameState.nextDirection = 'up';
                    break;
                case 'ArrowDown':
                    if (gameState.direction !== 'up') gameState.nextDirection = 'down';
                    break;
                case 'ArrowLeft':
                    if (gameState.direction !== 'right') gameState.nextDirection = 'left';
                    break;
                case 'ArrowRight':
                    if (gameState.direction !== 'left') gameState.nextDirection = 'right';
                    break;
            }
        });
        
        // Initialize back button state
        backBtn.style.display = 'none';
        
        // Responsive canvas sizing
        function resizeCanvas() {
            const container = document.querySelector('.game-container');
            const aspectRatio = canvas.width / canvas.height;
            
            if (container.clientWidth / container.clientHeight > aspectRatio) {
                canvas.style.width = 'auto';
                canvas.style.height = '80%';
            } else {
                canvas.style.width = '90%';
                canvas.style.height = 'auto';
            }
        }
        
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
    </script>
</body>
</html>
